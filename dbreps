#!/usr/bin/python

import ConfigParser
import codecs
import locale
import optparse
import os
import sys
import inspect

import oursql
import pywikibot

# Parse arguments.
parser = optparse.OptionParser(usage="Usage: %prog [-c INIFILE] -r REPORT -s SITE [-t]")
parser.add_option("-c", "--config", dest="inifile", default=os.path.expanduser('~/.dbreps.ini'),
                  help="read configuration from INIFILE instead of ~/.dbreps.ini")
parser.add_option("-r", "--report", dest="reportname",
                  help="run report REPORTNAME")
parser.add_option("-s", "--site", dest="site",
                  help="run report on SITE")
parser.add_option("-t", "--test", dest="test", action="store_true",
                  help="just print report, do not update wiki")
(options, args) = parser.parse_args()
if args:
    parser.error("Only options allowed")
if not options.inifile:
    parser.error("No inifile specified")
if not options.reportname:
    parser.error("No report specified")
if not options.site:
    parser.error("No site specified")

# Read configuration.
config = ConfigParser.ConfigParser()
config.readfp(codecs.open(options.inifile, "r", "utf8"))
if not config.has_section(options.site):
    parser.error("No section for %s in %s" % (options.site, options.inifile))

# Set up wiki login.
wiki = pywikibot.Site(config.get(options.site, 'sitecode'), config.get(options.site, 'sitefamily'))

# Load report module and initialize report.
try:
    reportmodule = __import__("reports.%s" % options.reportname, globals(), locals(), ["reports"])
except ImportError:
    parser.error("No report %s defined" % options.reportname)
r = reportmodule.report(wiki, options.site, config.get(options.site, 'dumpdate'), config.get(options.site, 'userdb'))

# Connect to database.
inikey = 'host'
if r.needs_commons_db():
    inikey += '-commons'
if r.needs_user_db():
    inikey += '-user'
if not config.has_option(options.site, inikey):
    parser.error("No option %s for %s in %s" % (inikey, options.site, options.inifile))
conn = oursql.Connection(host=config.get(options.site, inikey),
                         db=config.get(options.site, 'dbname'),
                         read_default_file='~/.my.cnf')

# Format report header and footer.
pageheader = r.get_preamble(conn) + u'''

{| class="wikitable sortable plainlinks" style="width:100%; margin:auto;"
|- style="white-space:nowrap;"
! No.
''' + ''.join("! %s\n" % column for column in r.get_table_columns())
footer = r.get_footer()
if footer != None:
    pagefooter = u'|}\n' + footer
else:
    pagefooter = u'|}'

# Format table rows.
i = 1
formatted_table_rows = []
for row in r.get_table_rows(conn):
    formatted_table_rows.append(u"|-\n| %s\n" % unicode(i) + ''.join(u"| " + unicode(cell) + u"\n" for cell in row))
    i += 1

# Upload report.
if options.test:
    # Wrap sys.stdout into a StreamWriter to allow writing unicode.
    sys.stdout = codecs.getwriter(locale.getpreferredencoding())(sys.stdout)
    print pageheader + ''.join(formatted_table_rows) + pagefooter
else:
    if r.rows_per_page():
        sub_page_nr = 1
        while (sub_page_nr - 1) * r.rows_per_page() < len(formatted_table_rows):
            first_row = (sub_page_nr - 1) * r.rows_per_page()
            next_first_row = sub_page_nr * r.rows_per_page()
            reportpage = pywikibot.Page(wiki,
                                        config.get(options.site, 'rootpage') + r.get_title() + '/' + str(sub_page_nr))
            pagecontents = pageheader + ''.join(formatted_table_rows[first_row:next_first_row]) + pagefooter
            reportpage.put(pagecontents, comment=config.get(options.site, 'editsumm'))
            sub_page_nr += 1
        while True:
            reportpage = pywikibot.Page(wiki,
                                        config.get(options.site, 'rootpage') + r.get_title() + '/' + str(sub_page_nr))
            if not reportpage.exists():
                break
            reportpage.put(config.get(options.site, 'blankcontent'), comment=config.get(options.site, 'blanksumm'))
            sub_page_nr += 1
    else:
        pagecontents = pageheader + ''.join(formatted_table_rows) + pagefooter
        reportpage = pywikibot.Page(wiki, config.get(options.site, 'rootpage') + r.get_title())
        reportpage.put(pagecontents, comment=config.get(options.site, 'editsumm'))

# Close connection to database.
conn.commit()
conn.close()

# upload source file
lines, linenum = inspect.getsourcelines(reportmodule)
sourceCode = u"".join([line.decode("utf8") for line in lines])

sourceCode = u'== {0} ==\n<div style="overflow:auto;">\n<source lang="python">\n{1}\n</source>\n</div>'.format(
    r.get_title(), sourceCode)

reportSourcePage = pywikibot.Page(wiki, config.get(options.site, 'rootpage') + r.get_title() + '/'
                                        + config.get(options.site, 'sourcepage'))
reportSourcePage.put(sourceCode, comment=config.get(options.site, 'editsourcesumm'))